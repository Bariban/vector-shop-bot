package telegram

import (
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/Bariban/vector-shop-bot/pkg/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/shopspring/decimal"
)

func (b *Bot) handleAddProductCmd(message *tgbotapi.Message) error {
	chatID := message.Chat.ID
	product := b.tempProduct[chatID]
	if message.Text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" {
		delete(b.states, chatID)
		delete(b.tempProduct, chatID)
	}
	if b.states[chatID] != stateWaitingForPhoto {
		b.states[chatID] = stateWaitingForPhoto
		product := &storage.Product{
			UserName: message.From.UserName,
			Image:    []*storage.ImageMeta{{}},
		}
		b.tempProduct[chatID] = product
		msg := tgbotapi.NewMessage(chatID, b.messages.Responses.SendPhoto)
		_, err := b.bot.Send(msg)
		return err
	}
	if product == nil {
		return fmt.Errorf("product data not initialized for chat: %d", chatID)
	}

	if len(product.Image) == 0 {
		product.Image = append(product.Image, &storage.ImageMeta{})
	}

	switch b.states[chatID] {
	case stateWaitingForPhoto:
		imageMeta, err := b.getFileMeta((*message.Photo)[len(*message.Photo)-1].FileID)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ.")
			_, _ = b.bot.Send(msg)
			return err
		}
		foundProduct, err := b.getProductsByVector(message, imageMeta.Float)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ.")
			_, _ = b.bot.Send(msg)
			return err
		}
		l := len(foundProduct)
		if l > 0 {
			var message string
			if l == 1 {
				message = "‚ùóÔ∏è –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π —Ç–æ–≤–∞—Ä"
			} else {
				message = "‚ùóÔ∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã"
			}
			msg := tgbotapi.NewMessage(chatID, message)
			_, _ = b.bot.Send(msg)
			for _, product := range foundProduct {

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
				for _, photo := range product.Image {
					photoFile := tgbotapi.NewPhotoUpload(chatID, tgbotapi.FileBytes{
						Name:  fmt.Sprintf("product_%d.jpg", product.ProductID),
						Bytes: photo.Byte,
					})
					if _, err := b.bot.Send(photoFile); err != nil {
						log.Printf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: %v", err)
					}
				}

				// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
				productInfo := fmt.Sprintf(
					"üõí *%s*\nüì¶ –ù–∞–ª–∏—á–∏–µ: %d\nüí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: %s\n",
					product.Name,
					product.Count,
					product.SellingPrice.StringFixed(2),
				)

				actionsProductKeyboard := b.getProductActionKeyboard(product.ProductID)

				msg := tgbotapi.NewMessage(chatID, productInfo)
				msg.ParseMode = "Markdown"
				msg.ReplyMarkup = actionsProductKeyboard

				sentMsg, err := b.bot.Send(msg)
				if err != nil {
					log.Printf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ: %v", err)
					return err
				}

				b.tempMsgID[chatID] = sentMsg.MessageID
			}
			return err
		}

		product.Image[0].Url = imageMeta.Url
		product.Image[0].Float = imageMeta.Float
		b.states[chatID] = stateWaitingForName
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
		_, err = b.bot.Send(msg)
		return err
	case stateWaitingForName:
		product.Name = message.Text
		b.states[chatID] = stateWaitingForDescription
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
		_, err := b.bot.Send(msg)
		return err

	case stateWaitingForDescription:
		product.Description = message.Text
		b.states[chatID] = stateWaitingForCount
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
		_, err := b.bot.Send(msg)
		return err

	case stateWaitingForCount:
		count, err := strconv.Atoi(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
			_, _ = b.bot.Send(msg)
			return err
		}
		product.Count = uint(count)
		b.states[chatID] = stateWaitingForPurchasePrice
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏:")
		_, err = b.bot.Send(msg)
		return err

	case stateWaitingForPurchasePrice:
		price, err := decimal.NewFromString(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏.")
			_, _ = b.bot.Send(msg)
			return err
		}
		product.PurchasePrice = price
		b.states[chatID] = stateWaitingForSellingPrice
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏:")
		_, err = b.bot.Send(msg)
		return err

	case stateWaitingForSellingPrice:
		price, err := decimal.NewFromString(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏.")
			_, _ = b.bot.Send(msg)
			return err
		}
		product.SellingPrice = price

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –ë–î
		product.ProductID, err = b.storage.Save(context.Background(), product)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")
			_, _ = b.bot.Send(msg)
			return err
		}
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î

		product.Image[0].Byte, err = b.getFileContent(product.Image[0].Url)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–æ—Ç–æ.")
			_, _ = b.bot.Send(msg)
			return err
		}
		err = b.storage.SaveImage(context.Background(), product)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ.")
			_, _ = b.bot.Send(msg)
			return err
		}

		delete(b.states, chatID)
		delete(b.tempProduct, chatID)

		msg := tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		_, err = b.bot.Send(msg)
		return err
	}

	return nil
}
